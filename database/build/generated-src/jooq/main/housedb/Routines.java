/*
 * This file is generated by jOOQ.
 */
package housedb;


import housedb.routines.CreateLocation;
import housedb.routines.CreateTimeseries;
import housedb.routines.ExpandLocationName;
import housedb.routines.StoreTimeseriesData;
import housedb.tables.RetrieveTimeseriesData;
import housedb.tables.records.RetrieveTimeseriesDataRecord;
import housedb.udt.records.DataTripleRecord;

import java.time.OffsetDateTime;

import org.jooq.Configuration;
import org.jooq.Field;
import org.jooq.Result;


/**
 * Convenience access to all stored procedures and functions in housedb
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Routines {

    /**
     * Call <code>housedb.create_location</code>
     */
    public static Long createLocation(Configuration configuration, String location) {
        CreateLocation f = new CreateLocation();
        f.setLocation(location);

        f.execute(configuration);
        return f.getReturnValue();
    }

    /**
     * Get <code>housedb.create_location</code> as a field.
     */
    public static Field<Long> createLocation(String location) {
        CreateLocation f = new CreateLocation();
        f.setLocation(location);

        return f.asField();
    }

    /**
     * Get <code>housedb.create_location</code> as a field.
     */
    public static Field<Long> createLocation(Field<String> location) {
        CreateLocation f = new CreateLocation();
        f.setLocation(location);

        return f.asField();
    }

    /**
     * Call <code>housedb.create_timeseries</code>
     */
    public static Long createTimeseries(Configuration configuration, String tsName) {
        CreateTimeseries f = new CreateTimeseries();
        f.setTsName(tsName);

        f.execute(configuration);
        return f.getReturnValue();
    }

    /**
     * Get <code>housedb.create_timeseries</code> as a field.
     */
    public static Field<Long> createTimeseries(String tsName) {
        CreateTimeseries f = new CreateTimeseries();
        f.setTsName(tsName);

        return f.asField();
    }

    /**
     * Get <code>housedb.create_timeseries</code> as a field.
     */
    public static Field<Long> createTimeseries(Field<String> tsName) {
        CreateTimeseries f = new CreateTimeseries();
        f.setTsName(tsName);

        return f.asField();
    }

    /**
     * Call <code>housedb.expand_location_name</code>
     */
    public static String expandLocationName(Configuration configuration, Long locationId) {
        ExpandLocationName f = new ExpandLocationName();
        f.setLocationId(locationId);

        f.execute(configuration);
        return f.getReturnValue();
    }

    /**
     * Get <code>housedb.expand_location_name</code> as a field.
     */
    public static Field<String> expandLocationName(Long locationId) {
        ExpandLocationName f = new ExpandLocationName();
        f.setLocationId(locationId);

        return f.asField();
    }

    /**
     * Get <code>housedb.expand_location_name</code> as a field.
     */
    public static Field<String> expandLocationName(Field<Long> locationId) {
        ExpandLocationName f = new ExpandLocationName();
        f.setLocationId(locationId);

        return f.asField();
    }

    /**
     * Call <code>housedb.store_timeseries_data</code>
     */
    public static Long storeTimeseriesData(Configuration configuration, String tsName, DataTripleRecord[] data, Boolean overwrite) {
        StoreTimeseriesData f = new StoreTimeseriesData();
        f.setTsName(tsName);
        f.setData(data);
        f.setOverwrite(overwrite);

        f.execute(configuration);
        return f.getReturnValue();
    }

    /**
     * Get <code>housedb.store_timeseries_data</code> as a field.
     */
    public static Field<Long> storeTimeseriesData(String tsName, DataTripleRecord[] data, Boolean overwrite) {
        StoreTimeseriesData f = new StoreTimeseriesData();
        f.setTsName(tsName);
        f.setData(data);
        f.setOverwrite(overwrite);

        return f.asField();
    }

    /**
     * Get <code>housedb.store_timeseries_data</code> as a field.
     */
    public static Field<Long> storeTimeseriesData(Field<String> tsName, Field<DataTripleRecord[]> data, Field<Boolean> overwrite) {
        StoreTimeseriesData f = new StoreTimeseriesData();
        f.setTsName(tsName);
        f.setData(data);
        f.setOverwrite(overwrite);

        return f.asField();
    }

    /**
     * Call <code>housedb.retrieve_timeseries_data</code>.
     */
    public static Result<RetrieveTimeseriesDataRecord> retrieveTimeseriesData(Configuration configuration, String tsName, OffsetDateTime startTime, OffsetDateTime endTime, String timezone, Boolean excludeMissing) {
        return configuration.dsl().selectFrom(housedb.tables.RetrieveTimeseriesData.RETRIEVE_TIMESERIES_DATA.call(tsName, startTime, endTime, timezone, excludeMissing)).fetch();
    }

    /**
     * Get <code>housedb.retrieve_timeseries_data</code> as a table.
     */
    public static RetrieveTimeseriesData retrieveTimeseriesData(String tsName, OffsetDateTime startTime, OffsetDateTime endTime, String timezone, Boolean excludeMissing) {
        return housedb.tables.RetrieveTimeseriesData.RETRIEVE_TIMESERIES_DATA.call(tsName, startTime, endTime, timezone, excludeMissing);
    }

    /**
     * Get <code>housedb.retrieve_timeseries_data</code> as a table.
     */
    public static RetrieveTimeseriesData retrieveTimeseriesData(Field<String> tsName, Field<OffsetDateTime> startTime, Field<OffsetDateTime> endTime, Field<String> timezone, Field<Boolean> excludeMissing) {
        return housedb.tables.RetrieveTimeseriesData.RETRIEVE_TIMESERIES_DATA.call(tsName, startTime, endTime, timezone, excludeMissing);
    }
}
