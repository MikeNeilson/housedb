/*
 * This file is generated by jOOQ.
 */
package housedb.tables;


import housedb.Housedb;
import housedb.tables.records.CatalogViewRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CatalogView extends TableImpl<CatalogViewRecord> {

    private static final long serialVersionUID = 1232889453;

    /**
     * The reference instance of <code>housedb.catalog_view</code>
     */
    public static final CatalogView CATALOG_VIEW = new CatalogView();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CatalogViewRecord> getRecordType() {
        return CatalogViewRecord.class;
    }

    /**
     * The column <code>housedb.catalog_view.id</code>.
     */
    public final TableField<CatalogViewRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>housedb.catalog_view.location</code>.
     */
    public final TableField<CatalogViewRecord, String> LOCATION = createField(DSL.name("location"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>housedb.catalog_view.parameter</code>.
     */
    public final TableField<CatalogViewRecord, String> PARAMETER = createField(DSL.name("parameter"), org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>housedb.catalog_view.type</code>.
     */
    public final TableField<CatalogViewRecord, String> TYPE = createField(DSL.name("type"), org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>housedb.catalog_view.interval</code>.
     */
    public final TableField<CatalogViewRecord, String> INTERVAL = createField(DSL.name("interval"), org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>housedb.catalog_view.duration</code>.
     */
    public final TableField<CatalogViewRecord, String> DURATION = createField(DSL.name("duration"), org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>housedb.catalog_view.version</code>.
     */
    public final TableField<CatalogViewRecord, String> VERSION = createField(DSL.name("version"), org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * Create a <code>housedb.catalog_view</code> table reference
     */
    public CatalogView() {
        this(DSL.name("catalog_view"), null);
    }

    /**
     * Create an aliased <code>housedb.catalog_view</code> table reference
     */
    public CatalogView(String alias) {
        this(DSL.name(alias), CATALOG_VIEW);
    }

    /**
     * Create an aliased <code>housedb.catalog_view</code> table reference
     */
    public CatalogView(Name alias) {
        this(alias, CATALOG_VIEW);
    }

    private CatalogView(Name alias, Table<CatalogViewRecord> aliased) {
        this(alias, aliased, null);
    }

    private CatalogView(Name alias, Table<CatalogViewRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view("create view \"catalog_view\" as  SELECT ts.id,\n    expand_location_name(( SELECT locations.id\n           FROM locations locations\n          WHERE (locations.id = ts.location_id))) AS location,\n    ( SELECT parameters.name\n           FROM parameters parameters\n          WHERE (parameters.id = ts.parameter_id)) AS parameter,\n    ( SELECT types.name\n           FROM types types\n          WHERE (types.id = ts.type_id)) AS type,\n    ( SELECT intervals.name\n           FROM intervals intervals\n          WHERE (intervals.id = ts.interval_id)) AS \"interval\",\n    ( SELECT intervals.name\n           FROM intervals intervals\n          WHERE (intervals.id = ts.duration_id)) AS duration,\n    ts.version\n   FROM timeseries ts;"));
    }

    public <O extends Record> CatalogView(Table<O> child, ForeignKey<O, CatalogViewRecord> key) {
        super(child, key, CATALOG_VIEW);
    }

    @Override
    public Schema getSchema() {
        return Housedb.HOUSEDB;
    }

    @Override
    public CatalogView as(String alias) {
        return new CatalogView(DSL.name(alias), this);
    }

    @Override
    public CatalogView as(Name alias) {
        return new CatalogView(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CatalogView rename(String name) {
        return new CatalogView(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CatalogView rename(Name name) {
        return new CatalogView(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Long, String, String, String, String, String, String> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
