/*
 * This file is generated by jOOQ.
 */
package housedb.tables.records;


import housedb.tables.Locations;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class LocationsRecord extends UpdatableRecordImpl<LocationsRecord> implements Record3<Long, String, Long> {

    private static final long serialVersionUID = 659293754;

    /**
     * Setter for <code>housedb.locations.id</code>.
     */
    public void setId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>housedb.locations.id</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>housedb.locations.name</code>.
     */
    public void setName(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>housedb.locations.name</code>.
     */
    public String getName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>housedb.locations.parent_id</code>.
     */
    public void setParentId(Long value) {
        set(2, value);
    }

    /**
     * Getter for <code>housedb.locations.parent_id</code>.
     */
    public Long getParentId() {
        return (Long) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, String, Long> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<Long, String, Long> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return Locations.LOCATIONS.ID;
    }

    @Override
    public Field<String> field2() {
        return Locations.LOCATIONS.NAME;
    }

    @Override
    public Field<Long> field3() {
        return Locations.LOCATIONS.PARENT_ID;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getName();
    }

    @Override
    public Long component3() {
        return getParentId();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getName();
    }

    @Override
    public Long value3() {
        return getParentId();
    }

    @Override
    public LocationsRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public LocationsRecord value2(String value) {
        setName(value);
        return this;
    }

    @Override
    public LocationsRecord value3(Long value) {
        setParentId(value);
        return this;
    }

    @Override
    public LocationsRecord values(Long value1, String value2, Long value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached LocationsRecord
     */
    public LocationsRecord() {
        super(Locations.LOCATIONS);
    }

    /**
     * Create a detached, initialised LocationsRecord
     */
    public LocationsRecord(Long id, String name, Long parentId) {
        super(Locations.LOCATIONS);

        set(0, id);
        set(1, name);
        set(2, parentId);
    }
}
