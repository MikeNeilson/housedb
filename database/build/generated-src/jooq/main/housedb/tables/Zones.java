/*
 * This file is generated by jOOQ.
 */
package housedb.tables;


import housedb.Housedb;
import housedb.Keys;
import housedb.tables.records.ZonesRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Zones extends TableImpl<ZonesRecord> {

    private static final long serialVersionUID = -994792283;

    /**
     * The reference instance of <code>housedb.zones</code>
     */
    public static final Zones ZONES = new Zones();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ZonesRecord> getRecordType() {
        return ZonesRecord.class;
    }

    /**
     * The column <code>housedb.zones.id</code>.
     */
    public final TableField<ZonesRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('zones_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>housedb.zones.name</code>.
     */
    public final TableField<ZonesRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>housedb.zones.description</code>.
     */
    public final TableField<ZonesRecord, String> DESCRIPTION = createField(DSL.name("description"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * Create a <code>housedb.zones</code> table reference
     */
    public Zones() {
        this(DSL.name("zones"), null);
    }

    /**
     * Create an aliased <code>housedb.zones</code> table reference
     */
    public Zones(String alias) {
        this(DSL.name(alias), ZONES);
    }

    /**
     * Create an aliased <code>housedb.zones</code> table reference
     */
    public Zones(Name alias) {
        this(alias, ZONES);
    }

    private Zones(Name alias, Table<ZonesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Zones(Name alias, Table<ZonesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Zones(Table<O> child, ForeignKey<O, ZonesRecord> key) {
        super(child, key, ZONES);
    }

    @Override
    public Schema getSchema() {
        return Housedb.HOUSEDB;
    }

    @Override
    public Identity<ZonesRecord, Long> getIdentity() {
        return Keys.IDENTITY_ZONES;
    }

    @Override
    public UniqueKey<ZonesRecord> getPrimaryKey() {
        return Keys.ZONES_PKEY;
    }

    @Override
    public List<UniqueKey<ZonesRecord>> getKeys() {
        return Arrays.<UniqueKey<ZonesRecord>>asList(Keys.ZONES_PKEY);
    }

    @Override
    public Zones as(String alias) {
        return new Zones(DSL.name(alias), this);
    }

    @Override
    public Zones as(Name alias) {
        return new Zones(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Zones rename(String name) {
        return new Zones(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Zones rename(Name name) {
        return new Zones(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
