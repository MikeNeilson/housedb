/*
 * This file is generated by jOOQ.
 */
package housedb.tables;


import housedb.Housedb;
import housedb.Keys;
import housedb.tables.records.TypesRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Types extends TableImpl<TypesRecord> {

    private static final long serialVersionUID = -2103054984;

    /**
     * The reference instance of <code>housedb.types</code>
     */
    public static final Types TYPES = new Types();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TypesRecord> getRecordType() {
        return TypesRecord.class;
    }

    /**
     * The column <code>housedb.types.id</code>.
     */
    public final TableField<TypesRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('types_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>housedb.types.name</code>.
     */
    public final TableField<TypesRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * Create a <code>housedb.types</code> table reference
     */
    public Types() {
        this(DSL.name("types"), null);
    }

    /**
     * Create an aliased <code>housedb.types</code> table reference
     */
    public Types(String alias) {
        this(DSL.name(alias), TYPES);
    }

    /**
     * Create an aliased <code>housedb.types</code> table reference
     */
    public Types(Name alias) {
        this(alias, TYPES);
    }

    private Types(Name alias, Table<TypesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Types(Name alias, Table<TypesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Types(Table<O> child, ForeignKey<O, TypesRecord> key) {
        super(child, key, TYPES);
    }

    @Override
    public Schema getSchema() {
        return Housedb.HOUSEDB;
    }

    @Override
    public Identity<TypesRecord, Long> getIdentity() {
        return Keys.IDENTITY_TYPES;
    }

    @Override
    public UniqueKey<TypesRecord> getPrimaryKey() {
        return Keys.TYPES_PKEY;
    }

    @Override
    public List<UniqueKey<TypesRecord>> getKeys() {
        return Arrays.<UniqueKey<TypesRecord>>asList(Keys.TYPES_PKEY);
    }

    @Override
    public Types as(String alias) {
        return new Types(DSL.name(alias), this);
    }

    @Override
    public Types as(Name alias) {
        return new Types(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Types rename(String name) {
        return new Types(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Types rename(Name name) {
        return new Types(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Long, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
