/*
 * This file is generated by jOOQ.
 */
package housedb.tables;


import housedb.Housedb;
import housedb.tables.records.CatalogRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Catalog extends TableImpl<CatalogRecord> {

    private static final long serialVersionUID = 657093955;

    /**
     * The reference instance of <code>housedb.catalog</code>
     */
    public static final Catalog CATALOG = new Catalog();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CatalogRecord> getRecordType() {
        return CatalogRecord.class;
    }

    /**
     * The column <code>housedb.catalog.id</code>.
     */
    public final TableField<CatalogRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>housedb.catalog.timeseries_name</code>.
     */
    public final TableField<CatalogRecord, String> TIMESERIES_NAME = createField(DSL.name("timeseries_name"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>housedb.catalog.parameter</code>.
     */
    public final TableField<CatalogRecord, String> PARAMETER = createField(DSL.name("parameter"), org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>housedb.catalog.type</code>.
     */
    public final TableField<CatalogRecord, String> TYPE = createField(DSL.name("type"), org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>housedb.catalog.interval</code>.
     */
    public final TableField<CatalogRecord, String> INTERVAL = createField(DSL.name("interval"), org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>housedb.catalog.duration</code>.
     */
    public final TableField<CatalogRecord, String> DURATION = createField(DSL.name("duration"), org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>housedb.catalog.version</code>.
     */
    public final TableField<CatalogRecord, String> VERSION = createField(DSL.name("version"), org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * Create a <code>housedb.catalog</code> table reference
     */
    public Catalog() {
        this(DSL.name("catalog"), null);
    }

    /**
     * Create an aliased <code>housedb.catalog</code> table reference
     */
    public Catalog(String alias) {
        this(DSL.name(alias), CATALOG);
    }

    /**
     * Create an aliased <code>housedb.catalog</code> table reference
     */
    public Catalog(Name alias) {
        this(alias, CATALOG);
    }

    private Catalog(Name alias, Table<CatalogRecord> aliased) {
        this(alias, aliased, null);
    }

    private Catalog(Name alias, Table<CatalogRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view("create view \"catalog\" as  SELECT catalog_view.id,\n    ((((((((((catalog_view.location || '.'::text) || (catalog_view.parameter)::text) || '.'::text) || (catalog_view.type)::text) || '.'::text) || (catalog_view.\"interval\")::text) || '.'::text) || (catalog_view.duration)::text) || '.'::text) || (catalog_view.version)::text) AS timeseries_name,\n    catalog_view.parameter,\n    catalog_view.type,\n    catalog_view.\"interval\",\n    catalog_view.duration,\n    catalog_view.version\n   FROM catalog_view;"));
    }

    public <O extends Record> Catalog(Table<O> child, ForeignKey<O, CatalogRecord> key) {
        super(child, key, CATALOG);
    }

    @Override
    public Schema getSchema() {
        return Housedb.HOUSEDB;
    }

    @Override
    public Catalog as(String alias) {
        return new Catalog(DSL.name(alias), this);
    }

    @Override
    public Catalog as(Name alias) {
        return new Catalog(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Catalog rename(String name) {
        return new Catalog(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Catalog rename(Name name) {
        return new Catalog(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Long, String, String, String, String, String, String> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
