buildscript{
    dependencies {
       classpath 'org.postgresql:postgresql:42.2.18.jre7'
    }
}

plugins {    
    id "org.flywaydb.flyway" version "7.5.0"
    id "nu.studer.jooq" version "5.2"
    id 'java-library'
}


repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
}

configurations {
    flywayMigration 
}

sourceSets {
    main {
        java.srcDirs += "${buildDir}/generated-src/jooq/main"
    }
}

dependencies {
    flywayMigration "org.postgresql:postgresql:$PG_VERSION"
    jooqGenerator "org.postgresql:postgresql:$PG_VERSION"
    compile "org.jooq:jooq:3.14.8"
    compile "org.jooq:jooq-meta:3.14.8"
}

flyway {
    configurations = ['flywayMigration']
    url = "jdbc:postgresql://$PGHOST:$PGPORT/$PGDATABASE"
    user = DBUSER
    password = DBPASSWORD
    mixed = true
    schemas = ['housedb']
}


task setup_tests( type: Exec ){
    environment 'PGPASSWORD', DBPASSWORD    
    commandLine "psql", "-h", "$PGHOST", "-p", "$PGPORT", "-d", "$PGDATABASE", "-U", "$DBUSER", "-f", "src/test/sql/install_tests.sql"
}

task teardown_tests(type: Exec ){
    environment 'PGPASSWORD', DBPASSWORD
    commandLine "psql", "-h", "$PGHOST", "-p", "$PGPORT", "-d", "$PGDATABASE", "-U", "$DBUSER", "-f", "src/test/sql/remove_tests.sql"
}

task testdb( type: Exec ){
    dependsOn setup_tests

    environment 'PGPASSWORD', "testpassword"
    commandLine "pg_prove", "--host", PGHOST, "--port", PGPORT, "--dbname", PGDATABASE, "--username", "housedb_user", "--runtests", "--schema", "housedb_tests"

    finalizedBy teardown_tests
}

jooq {
    configurations {
        main {
            generationTool{
                logging = org.jooq.meta.jaxb.Logging.WARN
                jdbc {
                    driver = 'org.postgresql.Driver'
                    url = flyway.url
                    user = flyway.user
                    password = flyway.password
                }
                generator {
                    name = 'org.jooq.codegen.DefaultGenerator'
                    database {
                        name = 'org.jooq.meta.postgres.PostgresDatabase'                        
                        inputSchema = flyway.schemas[0]
                        includes = '.*'
                        excludes = ''
                    }
                    target {
                        packageName = project.group
                    }
                }
            }
            
        }
    }
}
/* from plugin example */
// configure jOOQ task such that it only executes when something has changed that potentially affects the generated JOOQ sources
// - the jOOQ configuration has changed (Jdbc, Generator, Strategy, etc.)
// - the classpath used to execute the jOOQ generation tool has changed (jOOQ library, database driver, strategy classes, etc.)
// - the schema files from which the schema is generated and which is used by jOOQ to generate the sources have changed (scripts added, modified, etc.)
tasks.named('generateJooq').configure {
    // ensure database schema has been prepared by Flyway before generating the jOOQ sources
    dependsOn tasks.named('flywayMigrate')

    // declare Flyway migration scripts as inputs on the jOOQ task
    inputs.files(fileTree('src/main/resources/db/migration'))
        .withPropertyName('migrations')
        .withPathSensitivity(PathSensitivity.RELATIVE)

    // make jOOQ task participate in incremental builds and build caching
    allInputsDeclared = true
    outputs.cacheIf { true }
}
/*
compileGeneratedJava {
    dependsOn(generateJooq)
    classpath = configurations.compile
}
*/
compileJava {
    dependsOn(generateJooq)
    //source += sourceSets.generated.java
}