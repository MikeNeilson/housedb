import nu.studer.gradle.jooq.JooqEdition

plugins {
    id "nu.studer.jooq" version "5.2"
    id 'java-library'    
}

configurations {

}

sourceSets {
    main {
        java.srcDirs += "${buildDir}/generated-src/jooq/main"
    }
}

dependencies {
    jooqGenerator "org.postgresql:postgresql:$PG_VERSION"
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.10.3'
    implementation 'com.fasterxml.jackson.module:jackson-module-kotlin:2.10.3'
    implementation "io.swagger.core.v3:swagger-core:2.0.9"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.8.10"

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.0'
    testImplementation 'org.junit.platform:junit-platform-launcher:1.5.2'    
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.6.0'
}

test {
    useJUnitPlatform()    
}
   
jooq {    
    configurations {
        main {
            generationTool {
                logging = org.jooq.meta.jaxb.Logging.WARN
                jdbc {
                    driver = 'org.postgresql.Driver'
                    url = project(":database").flyway.url //"jdbc:postgresql://$PGHOST:$PGPORT/$PGDATABASE"
                    user = project(":database").flyway.user
                    password = project(":database").flyway.password
                }
                generator {
                    name = 'org.jooq.codegen.DefaultGenerator'
                    database {
                        name = 'org.jooq.meta.postgres.PostgresDatabase'                        
                        //inputSchemas = project(":database").flyway.schemas
                        schemata {
                            schema {
                                inputSchema = 'housedb'
                            }
                            schema {
                                inputSchema = 'housedb_locations'
                            }
                            schema {
                                inputSchema = 'housedb_timeseries'
                            }
                            schema {
                                inputSchema = 'housedb_security'
                            }
                        }
                        includes = '.*'
                        excludes = ''
                    }
                    target {
                        packageName = rootProject.group
                    }
                }
            }
            
        }
    }
}

/* from plugin example */
// configure jOOQ task such that it only executes when something has changed that potentially affects the generated JOOQ sources
// - the jOOQ configuration has changed (Jdbc, Generator, Strategy, etc.)
// - the classpath used to execute the jOOQ generation tool has changed (jOOQ library, database driver, strategy classes, etc.)
// - the schema files from which the schema is generated and which is used by jOOQ to generate the sources have changed (scripts added, modified, etc.)
tasks.named('generateJooq').configure {
    // ensure database schema has been prepared by Flyway before generating the jOOQ sources
    dependsOn project(":database").flywayMigrate

    // declare Flyway migration scripts as inputs on the jOOQ task
    inputs.files(fileTree(project(":database").projectDir.toString()+'src/main/resources/db/migration'))
        .withPropertyName('migrations')
        .withPathSensitivity(PathSensitivity.RELATIVE)

    // make jOOQ task participate in incremental builds and build caching
    allInputsDeclared = true
    outputs.cacheIf { true }
}

compileJava {
    dependsOn(generateJooq)    
    
}
