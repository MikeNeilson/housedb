buildscript {
    repositories { jcenter() }

    dependencies {
        classpath 'com.netflix.nebula:nebula-ospackage-plugin:3.+'
    }
}

plugins {    
    id 'application'
    id 'nebula.deb' version "8.5.6"
}

configurations {
    docker
}

dependencies {
    implementation 'org.jooq:jooq:3.14.8'
    implementation 'org.slf4j:slf4j-simple:1.8.0-beta4'
    implementation 'org.apache.tomcat:tomcat-jdbc:9.0.41'
    implementation 'io.javalin:javalin:3.13.4'
    implementation("io.javalin:javalin-openapi:3.12.0")
    implementation "io.swagger.core.v3:swagger-core:2.0.9"
    implementation "org.webjars:swagger-ui:3.24.3"
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.10.3'
    implementation 'com.fasterxml.jackson.module:jackson-module-kotlin:2.10.3'
    implementation "org.postgresql:postgresql:$PG_VERSION"    
    //compileOnly 'io.jsonwebtoken:jjwt-api:0.11.2'
    //runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.2',            
    //        'io.jsonwebtoken:jjwt-jackson:0.11.2'
    implementation project(":housedb-dao")
    implementation project(":database")
    testImplementation 'junit:junit:4.11'
}

application {
    mainClass = "net.hobbyscience.housedb.api.Entry"
}

//task run(type: JavaExec, dependsOn: jar ){
    //classpath = files(tasks.jar)
    //classpath += configurations.compile.collect    
run {
    jvmArgs "-Djava.util.logging.ConsoleHandler.level=ALL"
    environment "HOUSEDB_PORT", project.hasProperty('HOUSEDB_PORT') ? HOUSEDB_PORT: 7000
    environment "HOUSEDB_URL",  project(":database").flyway.url
    environment "HOUSEDB_USERNAME", project(":database").flyway.user
    environment "HOUSEDB_PASSWORD", project(":database").flyway.password
}

jar {
  manifest {
    attributes(
      'Class-Path': configurations.compile.collect { it.getName() }.join(' '),
      'Main-Class': application.mainClass
    )
  }
  
  from {
	configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
  }
}

task prepareDockerBuild(type: Copy, dependsOn: jar ){
    doFirst {
        project.mkdir("$buildDir/docker")
    }

    from "src/main/docker"
    into "$buildDir/docker"

    from(configurations.docker)
    from( jar.outputs.files.singleFile ) {
	rename "z-api.*\\.jar", "z-api.jar"
    }
}

task dockerBuild(type: Exec, dependsOn: prepareDockerBuild) {
    inputs.files configurations.docker.files

    workingDir "$buildDir/docker"
    executable "docker"
    args "build", "--tag=housedb-api:"+project.version, "."
}


task deb(type: Deb ){
    packageName = 'housedb-api'
    summary = 'API jar for housedb API'
    release = 1

    requires('default-jre-headless','>=11')

    preInstall file('src/main/deb/preInstall.sh')
    postInstall file('src/main/deb/postInstall.sh')

    into '/usr/local/housedb'
    from( jar.outputs.files ) {
        rename( "z-api-${project.version}.jar",'z-api.jar')
    }

    from( "src/main/systemd")

    link('/etc/systemd/system/housedb-api.service','/usr/local/housedb/housedb-api.service')
    doLast {
        println( "::set-output name=DEBFILE::${deb.packageName}_$project.version-${deb.release}_all.deb" )
    }
}

task deb_name {
    doLast {
        println( "$deb.packageName-$project.version-${deb.release}.deb" )
    }
}